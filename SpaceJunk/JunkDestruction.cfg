CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = JunkDestruction

    // Contract title is displayed in the window in the corner, should be short and descriptive
    title = Clean up space by destroying space junk

    // Reference to a CONTRACT_GROUP node which supplies additional rules for limiting the number of contracts within a given group
    group = Space Junk

	// Coherent Contracts hints
    topic 		= junk			// Topic of the contract
    subject 	= parts			// Subject of the contract
    motivation 	= destruction	// Motivation for why we are doing the contract

    // Give a quick summary of the contract.
    synopsis = To save @/targetBody from pollution, destroy @/targetVessel which is currently near @targetBody.
	
	// Contract notes are displayed under the "Objectives" heading, just above the parameters
    notes = Sean's Cannery is a very eco-freiendly company. It's so concerned to ensure space is tidy they contracted Jeb's Junkyard to clean it up.

    // The completedMessage is the message that is displayed when the contract completes
    completedMessage = One less piece of space debris. Good work!

    // Agent (agency)
    // agent = Jeb's Junk Yard

    // Contract min/max expiry in days.  If both are set to 0.0, it will result in a contract that never expires
    minExpiry = 30.0
    maxExpiry = 120.0
	
	// Contract deadline in days.  Default is no deadline.
    deadline = 500
	
	// Controls for whether a contract can be declined or cancelled, default is true for both
    //cancellable = false
    //declinable  = false

    // When set to true, this contract is automatically accepted when
    // offered.  Use it to make a contract like the stock World-Firsts
    // Record contracts.
    // Default = false
    autoAccept = false

    // Prestige level
    //prestige = Trivial
	
	// Target Celestial body - controls where the contract must be completed
	// Has some automated effects on numeric values (increasing science, etc)
    //targetBody = Kerbin
	targetBody = @/targetVessel.CelestialBody()

    // The maximum number of times this contract type can be completed (0 being unlimited)
    // Default = 0
    maxCompletions = 0

    // The maximum instances of this specific contract that can be offered at one time (0 being unlimited).
    // Default = 0
    maxSimultaneous = 1

    // Contract rewards. Adjust these values to balance rewards. Remember, the targetBody and Prestige modifiers will also apply behind the scenes
	advanceFunds 		= Random(15000.0,25000.0) 	* @/rewardFactor
    rewardScience 		= 1.0 						* @/rewardFactor
    rewardReputation 	= 2.0 						* @/rewardFactor
    rewardFunds 		= Random(15000.0,25000.0)  	* @/rewardFactor
    failureReputation 	= 2.0 						* @/rewardFactor
    failureFunds 		= Random(15000.0,25000.0) 	* @/rewardFactor
    
	// Weight has been deprecated
	// Weight the contract to increase its chance of selection within this contract group, not across all contracts in Mission Control
	// As we have two contracts in this contract group, this can be used to vary which one is more likely
    // weight = 1.0

	DATA // Find junk
	{
		type = Vessel
		requiredValue = false // Don't worry about this now, see the next DATA node
		
		// Trivial junk
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Debris && v.CelestialBody().IsHomeWorld() == true).Random()
		
		// Significant junk
		targetVessel2 = AllVessels().Where(v => v.VesselType() == Debris && v.CelestialBody().Parent().IsHomeWorld() == true).Random()
		
		// Exceptional junk
		targetVessel3 = AllVessels().Where(v => v.VesselType() == Debris && v.CelestialBody().IsHomeWorld() != true && v.CelestialBody().Parent().IsHomeWorld() != true).Random()
	}
	
	DATA // Choose a piece of junk based on prestige level. If there isn't any at this level the contract won't be offered, this time
	{
		type = Vessel
		uniquenessCheck = GROUP_ACTIVE 	// Don't have more than one active contract for the selected vessel. Avoids conflicting objectives
		requiredValue = true 			// We must select a vessel. If not, this acts like a failed REQUIREMENT and the contract won't be offered
		title = Must destroy a specific piece of junk
		targetVessel = Prestige() == Trivial ? @/targetVessel1 : Prestige() == Significant ? @/targetVessel2 : @/targetVessel3
	}
	
	DATA // Give a bonus for landed debris (always at least 1.0)
	{
		type = Double
		rewardFactorLanded   = @/targetVessel.IsLanded()   == true ? 1.5 : 0.0		// Can't be both landed and splashed
		rewardFactorSplashed = @/targetVessel.IsSplashed() == true ? 1.5 : 0.0		// Can't be both landed and splashed
		rewardFactor         = @/rewardFactorLanded + @/rewardFactorSplashed + 1.0 	// Always add a factor of 1
	}
	
	PARAMETER
	{
		name = VesselParameterGroup1
		type = VesselParameterGroup
		
		vessel = @/targetVessel
		title = Destroy @/targetVessel
		
		// By default if one or more vessels have been specified via the vessel
		// attribute, a child parameter will be created to indicate the vessel to
		// the player.  Set this attribute to true to hide that parameter.
		hideVesselName = true
		
		PARAMETER
		{
			name = VesselDestroyed
			type = VesselDestroyed

			// Set to true if this vessel must be destroyed by impacting into terrain
			// (and not another vessel or a building).
			//
			// Type:      bool
			// Required:  No (defaulted)
			// Default:   false
			//
			//mustImpactTerrain = true

			// Text for the contract parameter.
			//
			// Type:      string
			// Required:  No (defaulted)
			// Default:   Vessel Destroyed
			//
			//title =
		}
	}
}